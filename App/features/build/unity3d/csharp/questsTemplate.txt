using System;
using System.Collections.Generic;
using Assets.Transolar.Runtime;
using Assets.Transolar.Runtime.Entities;
using Assets.Transolar.Runtime.Serialization.JSON;

namespace Assets.CodeGen
{
    public class Quest: IHaveId, IHaveName
    {
        public Guid Id { get; set; }

        public Int32 Points { get; set; }

        [Ignore]
        public String InternalName { get; set;}

        public Quest(Guid id, String internalName, Int32 points) {
            Id = id;
            InternalName = internalName;
            Points = points;
        }

        public Quest() {
            // Parameterless Constructor Required for serialisation
        }

        [Ignore]
        public string Name {
            get { return Game.Localizer.Localize(Id.ToString()); }
        }

        [Ignore]
        public string DisplayName {
            get { return Game.Localizer.Localize(Id.ToString()); }
        }

        [Ignore]
        public string Label {
            get { return Name; }
        }

        [Ignore]
        public string Description {
            get { return Game.Localizer.Localize(Id + "_Description"); }
        }
    }

    public static class Quests
    {
        public static Dictionary<Guid, Quest> Dictionary = new Dictionary<Guid, Quest>()
        {
/*{{ListItems}}*/
        };

        public static bool TryGetQuestByName(string name, out Quest achievement) {
            // Linear lookup but it doesn't matter much
            foreach (var value in Dictionary.Values) {
                if (value.InternalName.ToLower() == name.ToLower()) {
                    achievement = value;
                    return true;
                }
            }
            achievement = null;
            return false;
        }
    }
}