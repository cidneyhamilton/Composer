using System.Collections.Generic;
using System.Linq;
using Assets.Transolar.Runtime.Scripts;
using UnityEditor;
using UnityEngine;

namespace Assets.Editor.Composer {
    [CustomPropertyDrawer(typeof(ScriptAttribute))]
    public class ScriptDrawer : PropertyDrawer {
        int sceneIndex;
        int scriptIndex;

        public class Item {
            public string Name;

            public Item(string name) {
                Name = name;
                Children = new List<ChildItem>();
            }

            public List<ChildItem> Children { get; set; }

            public bool ContainsScript(string scriptId) {
                return Children.Any(x => x.Id == scriptId);
            }

            public class ChildItem {
                public string Name;
                public string Id;

                public ChildItem(string id, string name) {
                    Id = id;
                    Name = name;
                }
            }
        }

        public static Item[] Items = new Item[] {
{list items}
        };

        public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
            EditorGUI.BeginChangeCheck();

            for(var i = 0; i < Items.Length; i++) {
                var current = Items[i];

                if(current.ContainsScript(property.stringValue)) {
                    sceneIndex = i;

                    for(var j = 0; j < current.Children.Count; j++){
                        if(property.stringValue == current.Children[j].Id) {
                            scriptIndex = j;
                            break;
                        }
                    }

                    break;
                }
            }

            var first = new Rect(position.x, position.y, position.width, position.height/2);
            var second = new Rect(position.x, position.y + (position.height/2), position.width, position.height/2);

            sceneIndex = EditorGUI.Popup(first, "Scene", sceneIndex, Items.Select(x => x.Name).ToArray());
            scriptIndex = EditorGUI.Popup(second, "Script", scriptIndex, Items[sceneIndex].Children.Select(x => x.Name).ToArray());

            if(EditorGUI.EndChangeCheck()) {
                if (scriptIndex >= Items[sceneIndex].Children.Count)
                    scriptIndex = 0;
                property.stringValue = Items[sceneIndex].Children[scriptIndex].Id;
            }
        }

        public override float GetPropertyHeight(SerializedProperty property, GUIContent label) {
            return base.GetPropertyHeight(property, label)*2;
        }
    }
}